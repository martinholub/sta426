par(oma=c(0,1,0,2))
gplots::heatmap.2(x_norm, distfun = dist_fun, col = colors,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", revC = T, labCol = "", labRow = samples)
gplots::heatmap.2(x_norm, distfun = dist_fun, col = colors,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", revC = T, labCol = "", labRow = samples)
gplots::heatmap.2(x_norm, distfun = dist_fun, col = colors,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", revC = T, labCol = "", labRow = samples,
margins = c(1, 6))
colnames(x)
samples
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", revC = T, labCol = "", labRow = samples,
margins = c(1, 6))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", labCol = "", labRow = samples,
margins = c(1, 6))
par(mar=c(1,1,1,1))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", labCol = "", labRow = samples,
margins = c(1, 6))
dev.off()
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", labCol = "", labRow = samples,
margins = c(1, 6))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", labCol = "", labRow = samples,
margins = c(1, 6))
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "both", Rowv = as.dendrogram(clusters),
Colv = "RowV", labCol = "", labRow = samples,
margins = c(1, 6))
# pheatmap::pheatmap(x_norm, main = "HeatMap",
#                    #clustering_distance_rows = dist_fun,
#                    #clustering_distance_cols = dist_fun,
#                    clustering_method = "ward.D",
#                    color = colorRampPalette(c('green', 'orange'))(100),
#                    annotation_row = samples)
my_palette <- colorRampPalette(c("yellow", "green"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "column",
Rowv = as.dendrogram(clusters), Colv = "NA",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none"
margins = c(1, 6))
my_palette <- colorRampPalette(c("yellow", "green"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "column",
Rowv = as.dendrogram(clusters), Colv = "NA",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none".
my_palette <- colorRampPalette(c("yellow", "green"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "column",
Rowv = as.dendrogram(clusters), Colv = "NA",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
margins = c(1, 6))
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
my_palette <- colorRampPalette(c("yellow", "green"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "column",
Rowv = as.dendrogram(clusters), Colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
margins = c(1, 6))
# pheatmap::pheatmap(x_norm, main = "HeatMap",
#                    #clustering_distance_rows = dist_fun,
#                    #clustering_distance_cols = dist_fun,
#                    clustering_method = "ward.D",
#                    color = colorRampPalette(c('green', 'orange'))(100),
#                    annotation_row = samples)
graphics.off()
par("mar")
par(mar=c(1,1,1,1))
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
annotation<-data.frame(condition=c(rep('isNorm',6),rep('isSick',5),rep('isAcute',6)))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters), Colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
RowSideColors = annotation,
trace = "none",
margins = c(3, 1), scale = "none")
annotation
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
annotation<-data.frame(condition=c(rep('isNorm',6),rep('isSick',5),rep('isAcute',6)))
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters), Colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
margins = c(3, 1), scale = "none")
?image
?co
?cor
?image
x_corr = cor(log2(x_norm), na.rm = TRUE)
?cor
x_corr = cor(log2(x_norm))
image(x_corr)
?image
cor_palette = colorRampPalette(c("white", "blue"))(n = 100)
x_corr = cor(log2(x_norm))
image(x_corr, main = "correlation matrix", col = cor_palette,
xlab = samples, ylab = samples)
#png("cor_mat.png", width=5, height=5, units="in", res=200)
cor_palette = colorRampPalette(c("white", "blue"))(n = 100)
x_corr = cor(log2(x_norm))
image(x=seq(nrow(x_corr)), y=seq(ncol(x_corr)), z=x_corr,
main = "correlation matrix", col = cor_palette,
xlab = "", ylab = "", axes = F)
axis(1, at=seq(nrow(x_corr)), labels = samples, las=2)
axis(2, at=seq(ncol(x_corr)), labels = samples, las=1)
?axis
?image
?image
ColorBar
install.packages("corrplot")
corrplot::corrplot(x_corr, type = "upper", title = "Correlation Matrix",
col = cor_palette, method = "color")
corrplot::corrplot(x_corr, title = "Correlation Matrix",
col = cor_palette, method = "color")
cor_palette = colorRampPalette(c("white", "blue"))(n = 100)
x_corr = cor((x_norm))
corrplot::corrplot(x_corr, title = "Correlation Matrix",
col = cor_palette, method = "color")
corrplot::corrplot(x_corr, title = "Correlation Matrix",
method = "color")
cor_palette = colorRampPalette(c("white", "blue"))(n = 100)
x_corr = cor(log2(x_norm))
corrplot::corrplot(x_corr, title = "Correlation Matrix",
method = "color")
corrplot::corrplot(x_corr, title = "Correlation Matrix",
method = "color", cl.pos="b")
heatmap(x_corr, main = "Correlation Heatmap")
heatmap(x_corr, main = "Correlation Heatmap", col = cor_palette)
?heatmap
heatmap(x_corr, main = "Correlation Heatmap", col = cor_palette,
distfun = dist_fun)
?cmdscale
x_mds = distfun(x_norm, k = 2)
x_mds = dist_fun(x_norm, k = 2)
x_mds = (dist_fun(x_norm), k = 2)
x_mds = cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels")
x_mds = cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = colors)
?plot
?scatter
x_mds = cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = colors, pch = 16)
clusters
clusters
mycl <- cutree(clusters, h=max(clusters$height/1.5))
mycl
x_mds = cmdscale(dist_fun(x_norm), k = 2)
mycl <- cutree(clusters, h=max(clusters$height/1.5))
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
# choose a color palette for the heat map
myheatcol <- rev(redgreen(75))
x_mds = cmdscale(dist_fun(x_norm), k = 2)
mycl <- cutree(clusters, h=max(clusters$height/1.5))
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
# choose a color palette for the heat map
myheatcol <- rev(gplots::redgreen(75))
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myheatcol, pch = 16)
cutree(clusters, h=max(clusters$height/2))
cutree(clusters, h=max(clusters$height/4))
?gplots::redgreen
x_mds = cmdscale(dist_fun(x_norm), k = 2)
mycl <- cutree(clusters, h=max(clusters$height/4))
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
# choose a color palette for the heat map
myheatcol <- rev(gplots::redgreen(length(unique(mycl))))
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myheatcol, pch = 16)
myheatcol
clusterCols
myClusterSideBar
?rev
rev
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
# choose a color palette for the heat map
myheatcol <- rev(gplots::redgreen(length(unique(mycl))))
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = clusterCols, pch = 16)
clusterCols
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
mycl
unique(mycl)
unique(rnames(mycl))
rownames(mycl)
mycl.names
names(mycl)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend(legend = names, col = clusterCols, lwd = 1, cex = 0.75,
y.intersp = 0.75, ncol = 1)
?legend
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, lwd = 1, cex = 0.75,
y.intersp = 0.75, ncol = 1)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, lwd = 1, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, cex = 1.5,
y.intersp = 0.75, ncol = 1, pch = 16)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
# Do multidimensional scaling
x_mds = cmdscale(dist_fun(x_norm), k = 2)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
myClusterSideBar <- clusterCols[mycl]
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = myClusterSideBar, pch = 16)
names = c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
?pca
?prcomp
x_pca = prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(x_pca, main = "PCA of expression levels", col = clusterCols, pch = 16)
?princomp
list[sdevs, x_rotated, x_transformed, center, scale] = prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
list[sdev, rotation, x, center, scale] = prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
list[sdev, rotation, x_transformed, center, scale] <- prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols_unique <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
clusterCols <- clusterCols_unique[mycl]
# Do multidimensional scaling
x_mds <- cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = clusterCols, pch = 16)
names <. c("norm", "sick", "acute")
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols_unique <- rainbow(length(unique(mycl)))
# create vector of colors for side bar
clusterCols <- clusterCols_unique[mycl]
# Do multidimensional scaling
x_mds <- cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
x_norm <- limma::normalizeQuantiles((x))
limma::plotDensities(object = log2(x_norm), col = colors, legend = FALSE,
main ="limma::plotDensities of qNormalized data")
legend("topright", legend = samples, col = colors, lwd = 1, cex = 0.75,
y.intersp = 0.75, ncol = 1)
#list[sdev, rotation, x_transformed, center, scale]
ret = prcomp(x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x = x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x = x_norm, center = TRUE, scale = TRUE, rank = 10)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x = x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col <- clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
ret <- prcomp(x = x_norm, center = TRUE, scale = TRUE, rank = 2)
plot(ret, main = "PCA of expression levels", col = clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
list[sdevs, x_rot, x_scal, cent, scal] <- prcomp(x = x_norm, center = TRUE, scale = TRUE, rank = 2)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$x[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
plot(pca_res$sdev, type = 'l', main = 'Variance explained by given PC', xlab = "# of PC")
tot_var = sum(pca_res$sdev)
tot_var
tot_var = sum(pca_res$sdev)
explained_var = pca_res$sdev / tot_var * 100
plot(explained_var, type = 'l', main = 'Variance explained by given PC', xlab = "# of PC", ylab = "% of explained variance")
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters), Colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
scale = "none",
main = "Expression Heatmap")
# pheatmap::pheatmap(x_norm, main = "HeatMap",
#                    #clustering_distance_rows = dist_fun,
#                    #clustering_distance_cols = dist_fun,
#                    clustering_method = "ward.D",
#                    color = colorRampPalette(c('green', 'orange'))(100),
#                    annotation_row = samples)
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters),
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
scale = "none",
main = "Expression Heatmap")
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters), colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
scale = "none",
main = "Expression Heatmap")
my_palette <- colorRampPalette(c("orange", "red"))(n = 100)
gplots::heatmap.2(x_norm, distfun = dist_fun,
dendrogram = "row",
Rowv = as.dendrogram(clusters), Colv = "Rowv",
labCol = "", labRow = samples,
density.info="none",
col = my_palette,
trace = "none",
scale = "none",
main = "Expression Heatmap")
# pheatmap::pheatmap(x_norm, main = "HeatMap",
#                    #clustering_distance_rows = dist_fun,
#                    #clustering_distance_cols = dist_fun,
#                    clustering_method = "ward.D",
#                    color = colorRampPalette(c('green', 'orange'))(100),
#                    annotation_row = samples)
max(x_corr)
min(x_corr)
mycl
clusterCols
unique(mycl)
?vecotr
?vector
clusterCols <- vector(mode = "character", length =length(mycl))
clusterCols[mycl == 1 ] <- clusterCols_unique[1]
clusterCols
# Get cluster membership from previous clustering
mycl <- cutree(clusters, h=max(clusters$height/4))
#Define Coloring
clusterCols_unique <- rainbow(length(unique(mycl)))
# create vector of colors for legend
clusterCols <- vector(mode = "character", length =length(mycl))
clusterCols[mycl == 1 ] <- clusterCols_unique[1]
clusterCols[mycl == 2 ] <- clusterCols_unique[2]
clusterCols[mycl == 3 ] <- clusterCols_unique[3]
# Do multidimensional scaling
x_mds <- cmdscale(dist_fun(x_norm), k = 2)
plot(x_mds, main = "Multi-dimensional scaling of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
clusterCols
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
legend("topright",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("top",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("topright",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,2:3], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("topright",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("topright",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
#list[sdev, rotation, x_transformed, center, scale]
pca_res <- prcomp(x = x_norm, center = TRUE, scale = TRUE)
plot(pca_res$rotation[,1:2], main = "PCA of expression levels", col = clusterCols, pch = 16)
names <- c("norm", "sick", "acute")
legend("topright",legend = names, col = clusterCols_unique, cex = 0.75,
y.intersp = 0.75, ncol = 1, pch = 16)
