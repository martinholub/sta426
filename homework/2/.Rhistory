knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
anno = read.table("SampleAnnotation.txt", as.is=TRUE, sep="\t", quote="",
row.names=1, header=TRUE)
x = read.table("expressionData.txt", as.is=TRUE, sep="\t", quote="", row.names=1, header=TRUE, check.names = FALSE)
x = as.matrix(x)
samples = rownames(anno)
colors = rainbow(nrow(anno))
isNorm = anno$TissueType == "norm"
isSick = anno$TissueType == "sick"
isAcute = anno$TissueType == "acute"
head(anno, 6)
head(x, 6)
head(x,2)
?boxplot
?groupby
samples
colors
isNorm
boxplot(x)
?grouping
?boxplot.stats
?boxplot
head(x, 7)
dim(x)
boxplot(x, use.cols = TRUE)
boxplot(log2(x), use.cols = TRUE)
rownames(x)
len(unique(rownames(x)))
length(unique(rownames(x)))
density?
q
?density
density(x, bw ="SJ", kernel= "gauss", na.rm = TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("limma"
)
browseVignettes("limma")
library(limma)
?limma::plotDensities
density(x, bw ="SJ", kernel= "gauss", na.rm = TRUE)
?density
?plot
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
legend("right", legend = name)
}
df
plot(density(log(x[,1])))
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
#legend("right", legend = name)
}
print("a")
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
print("a")
#legend("right", legend = name)
}
install.packages("ggplot2")
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
df
#legend("right", legend = name)
}
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
df
legend("right", legend = name)
}
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
plot(df, col = color)
}
legend("right", legend = anno)
?lines
anno
anno[,1]
anno[,0]
samples
?legend
plot.new()
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
lines(df, col = color)
}
legend("right", legend = samples, col = colors)
?lines
plot.new()
install.packages("reshape2")
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
lines(df, col = color)
}
plot.new()
legend("right", legend = samples, col = colors)
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
lines(df, col = color)
}
plot.new()
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
lines(df, col = color)
}
legend("right", legend = samples, col = colors)
plot.new()
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
lines(df, col = color)
}
legend("right", legend = samples)
melt(x)
x_m = reshape2::melt(x)
ggplot2::ggplot() + ggplot2::geom_line(data = y_m, col = colors)
x_m = reshape2::melt(x)
ggplot2::ggplot() + ggplot2::geom_line(data = x_m, col = colors)
x_m = reshape2::melt(x)
ggplot2::ggplot() + ggplot2::geom_line(data = x_m)
head(x,5)
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
else
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
} else {
lines(df, col = color)
} }
legend("right", legend = samples)
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
} else {
lines(df, col = color)
} }
legend("right", legend = samples, col = colors)
?legend
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
} else {
lines(df, col = color)
} }
legend("right", legend = samples, col = colors, lwd = 2.5)
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
} else {
lines(df, col = color)
} }
legend("right", legend = samples, col = colors, lwd = 2.5, ncol = 2)
for (i in 1:dim(x)[2]){
df = density(log2(x[, i]), bw ="SJ", kernel= "gauss", na.rm = TRUE)
color = colors[i]
name = samples[i]
if (i == 1){
plot(df, col = color)
} else {
lines(df, col = color)
} }
legend("topright", legend = samples, col = colors, lwd = 2.5, ncol = 2)
?limma::plotDensities
limma::plotDensities(log2(x), col = colors, legend = samples)
limma::plotDensities(log2(x), col = colors, legend = "topright")
limma::plotDensities(object = (x), col = colors, legend = "topright")
?limma::normalizeQuantiles
x_norm <- limma::normalizeQuantiles(x)
limma::plotDensities(object = log2(x_norm), col = colors, legend = "topright")
x_norm <- limma::normalizeQuantiles(x)
limma::plotDensities(object = log2(x_norm), col = colors, legend = "topright")
x_norm <- limma::normalizeQuantiles(x)
limma::plotDensities(object = log2(x), col = colors, legend = "topright")
x_norm <- limma::normalizeQuantiles(log2(x))
limma::plotDensities(object = x_norm, col = colors, legend = "topright")
?hclust
?dist
?hclust
dist_measure = dist(x_norm, method = "euclidian")
View(x_norm)
dist_measure = dist(x_norm[1, ], method = "euclidian")
hclust(dist_measure)
dist_measure = dist(x_norm[1, ], method = "euclidian")
clusters <- hclust(dist_measure)
plot(clusters)
dist_measure = dist(x_norm[1:3, ], method = "euclidian")
clusters <- hclust(dist_measure)
plot(clusters)
dist_measure = dist(x_norm[1:3, ], method = "euclidian")
clusters <- hclust(dist_measure)
plot(clusters)
clusters
dist_measure = dist(x_norm[1, ], method = "euclidian")
clusters <- hclust(dist_measure)
plot(clusters)
clusters
dist_measure = dist(x_norm[, 1], method = "euclidian")
dist_measure = dist(x_norm[, 2], method = "euclidian")
dist_measure <- dist(x_norm[, 2], method = "euclidian")
