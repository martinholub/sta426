idxer[1: samp_size] <- rep(TRUE, samp_size)
pred_class <- prediction(1 - p_vals_class[idxer], ground_truth[idxer])
pred_mod <- prediction(1 - p_vals_mod[idxer], ground_truth[idxer])
pred_fc <- prediction(fc_vals[idxer], ground_truth[idxer]*trueFC)
perfc <- performance(pred_class, measure = "tpr", x.measure = "fpr")
aucc <- performance(pred_class, measure = "auc")
perfm <- performance(pred_mod, measure = "tpr", x.measure = "fpr")
aucm <- performance(pred_mod, measure = "auc")
perffc <-performance(pred_fc, measure = "tpr", x.measure = "fpr")
aucfc <- performance(pred_fc, measure = "auc")
#perfc <- sum((p_vals_class[idxer] > thresh)) / samp_size # TP
#perfm <- sum((p_vals_mod[idxer] > thresh)) / samp_size # TP
#perf_class_container <- append(perf_class_container, perfc)
#perf_mod_container <- append(perf_mod_container, perfm)
plot(perfc, col = colors_roc[1])
abline(a=0, b= 1)
plot(perfm, add = TRUE, col = colors_roc[2])
plot(perffc, add = TRUE, col = colors_roc[3])
leg1 <- sprintf("t-classical, auc = %1.3f", round(unlist(aucc@y.values), 3))
leg2 <- sprintf("t-moderated, auc = %1.3f", round(unlist(aucm@y.values), 3))
leg3 <- sprintf("t-moderated, auc = %1.3f", round(unlist(aucfc@y.values), 3))
legend("bottomright", legend = c(leg1, leg2, leg3), col = colors_roc, lwd = 1, cex = 1,y.intersp = 1, ncol = 1)
}
#plot(samp_sizes[1:it], ylim = c(0.9, 1.1), perf_class_container, col = "red")
#points(samp_sizes[1:it], perf_mod_container, col = "blue")
library("limma")
library("affy")
source("https://bioconductor.org/biocLite.R")
biocLite("affy"
)
library("limma")
library("affy")
library("preprocessCore")
unzip("affy_estrogen.zip")
ddir <- "affy_estrogen"
dir(ddir)
?readTargets
?ReadAffy
?rma
?plotMDS
?exprs
Biobase::exprs()
# do the limma modeling
f <- paste(targets$estrogen,targets$time.h,sep="")
# preprocess affymetrix data
targets <- limma::readTargets("targets.txt", path=ddir)
targets
abatch <- affy::ReadAffy(filenames=targets$filename,
celfile.path=ddir)
eset <- affy::rma(abatch)  # bg correct, normalize, summarize
limma::plotMDS( Biobase::exprs(eset) )  # MDS plot
# do the limma modeling
f <- paste(targets$estrogen,targets$time.h,sep="")
f <- factor(f)
# create design matrix
design <- model.matrix(~0+f)
colnames(design) <- levels(f)
design
?factor
f <- paste(targets$estrogen,targets$time.h,sep="")
f
factor(f)
f <- factor(f)
?model.matrix
~0+f
0+f
levels(f)
?levels
design
design <- model.matrix(~0+f)
design
colnames(design) <- levels(f)
fit <- limma::lmFit(eset, design)
cont.matrix <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
cont.matrix
?contrasts.fit
fit2  <- limma::contrasts.fit(fit, cont.matrix)
fit2  <- limma::eBayes(fit2, robust = TRUE) # use robust LinReg to deal with outliers
fit2
class(fit2)
names(fit2)
?topTable
limma::topTable(fit2,coef=1)
limma::topTable(fit2,coef=2)
limma::topTable(fit2,coef=1)
limma::topTable(fit2,coef=3)
limma::topTable(fit2,coef=1)
limma::topTable(fit2,coef=4)
limma::topTable(fit2,coef=1)
limma::topTable(fit2,coef=2)
limma::topTable(fit2,coef=3)
barplot( exprs(eset)["39642_at",], las=2, cex.names=.7 )  # top gene
barplot( exprs(eset)["AFFX-CreX-5_at",], las=2, cex.names=.7 )  # top gene
barplot( exprs(eset)["AFFX-CreX-5_at",], las=2, cex.names=.7 )  # top gene in time
#confirmed
eset
design
barplot( exprs(eset)["910_at",], las=2, cex.names=.7 )  # top gene in time
#confirmed
barplot( exprs(eset)["AFFX-CreX-5_at",], las=2, cex.names=.7 )  # top gene in time
#confirmed
eset$sample
eset@annotation
eset
experimentData(eset)
?experimentData?
?experimentData?
q
?experimentData
eset
eset@assayData
eset@assayData$exprs
head(eset@assayData$exprs)
colnames(eset@assayData$exprs)
levels(design)
design
levels(f)
factor(colnames(eset@assayData$exprs))
head(eset@assayData$exprs)
?qr
eset@assayData$exprs)["910_at"]
eset@assayData$exprs["910_at"]
eset@assayData$exprs
eset@assayData$exprs$910_at
eset@assayData$exprs["910_at"]
eset@assayData$exprs["111_at"]
head(eset@assayData$exprs)
rownames(eset@assayData$exprs)
class(eset@assayData$exprs)
names(eset@assayData$exprs)
eset@assayData$exprs["111_at", ]
qr.solve(eset@assayData$exprs["111_at", ], design)
barplot( exprs(eset)["39642_at",], las=2, cex.names=.7 )  # top gene
qr.solve(eset@assayData$exprs["39642_at", ], design)
barplot( exprs(eset)["AFFX-CreX-5_at",], las=2, cex.names=.7 )  # top gene in time
#confirmed
qr.solve(eset@assayData$exprs["AFFX-CreX-5_at", ], design)
barplot( exprs(eset)["AFFX-CreX-5_at",], las=2, cex.names=.7 )  # top gene in time
#confirmed
barplot( exprs(eset)["39642_at",], las=2, cex.names=.7 )  # top gene
qr.solve(eset@assayData$exprs["AFFX-CreX-5_at", ], design)
qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
?plotMDS
cont.matrix
coeffs["absent10"]
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
coeffs["absent10"]
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# https://en.wikipedia.org/wiki/Fold_change
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
fc_ab <- (coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
lofc_ab
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# https://en.wikipedia.org/wiki/Fold_change
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
fc_ab <- (coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
fc_pr <- (coeffs["present10"]) / coeffs["present48"]
logfc_pr <- log2(fc_pr)
fc_pr
logfc_pr
cont.matrix
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# https://en.wikipedia.org/wiki/Fold_change
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent48"] - coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
logfc_pr <- log2(fc_pr)
fc_pr
logfc_pr
mean(coeffs)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#
# fc_pr
# logfc_pr
mean(log2(coeffs["absent48"])) - mean(log2(coeffs["absent10"]))
log2(mean(coeffs["absent48"]/coeffs["absent10"]))
cont.matrix
log2(mean(coeffs["absent10"]/coeffs["absent48"]))
log2(mean((coeffs["present48"] - coeffs["present10"])/coeffs["absent48"]))
2^-7
coeffs
log2(13)/log2(6)
log(13)/log(6)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["AFFX-CreX-5_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
coeffs_all <- qr.solve(design, eset@assayData$exprs)
?qr
design
dims(eset@assayData$exprs)
dim(eset@assayData$exprs)
coeffs_all <- qr.solve(eset@assayData$exprs, design)
dims(design)
dim(design)
coeffs_all <- qr.solve(design, t(eset@assayData$exprs))
dim(coeffs_all)
head(dim)
head(coeffs_all)
coeffs_all["absent10"]
coeffs_all <- qr.solve(t(design), (eset@assayData$exprs))
coeffs_all <- solve((design), (eset@assayData$exprs))
?qr
lsfit(design, eset@assayData$exprs)
lsfit(design, t(eset@assayData$exprs))
?"MArrayLM-class"
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent10"]) / coeffs["absent48"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
cont.matrix
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent10"]) / coeffs["absent10"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent10"]) / coeffs["present10"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present10"]) / coeffs["absent10"]
logfc_ab <-log2(fc_ab)
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present10"]) / coeffs["absent10"]
logfc_ab <-mean(log2(coeffs["present10"]))) - mean(log2(coeffs["absent10"])))
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present10"]) / coeffs["absent10"]
logfc_ab <-mean(log2(coeffs["present10"])) - mean(log2(coeffs["absent10"]))
fc_ab
logfc_ab
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present10"]) / coeffs["absent10"]
logfc_ab <-mean(log2(coeffs["present10"])) - mean(log2(coeffs["absent10"]))
fc_ab
logfc_ab
logfc_ab == log2(fc_ab)
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
log2(fc_ab)
logfc_ab
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
aver_exprs
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present10"]) / coeffs["absent10"]
logfc_ab <-mean(log2(coeffs["present10"])) - mean(log2(coeffs["absent10"]))
fc_ab
logfc_ab
round(logfc_ab, 3) == round(log2(fc_ab), 3)
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
design
cont.matrix
coeffs
dim(design)
desing
design
contr.treatment()
contr.treatment(design)
dim(contr.treatment(design))
cont.matrix
mean(log2(eset@assayData$exprs[, "present10"]))
colanmes(eset@assayData$exprs)
colnames(eset@assayData$exprs)
targets
gnames<- paste(targets$estrogen,targets$time.h,sep="")
gnames
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
gnames<- paste(targets$estrogen,targets$time.h,sep="")
colnames(eset@assayData$exprs) <- gnames
f
colnames(eset@assayData$exprs)
gnames
mean(log2(eset@assayData$exprs[, c("low10-1.cel", "low10-2.cel" )]))
mean(log2(eset@assayData$exprs[, c("high10-1.cel", "high10-2.cel" )]))
avr_exprs
aver_exprs
9.66/2.8
log2(9.66)/2.8
log2(mean(eset@assayData$exprs[, c("high10-1.cel", "high10-2.cel" )]))
log2(mean(eset@assayData$exprs[, c("low10-1.cel", "low10-2.cel" )]))
coeffs["present10"])
coeffs["present10"]
coeffs["absent10"]
log2(11.7)-log2(8.58)
1/0.447
barplot( exprs(eset)["910_at",], las=2, cex.names=.7 )  # top gene
cont.matrix
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
gnames<- paste(targets$estrogen,targets$time.h,sep="")
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
base
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
gnames<- paste(targets$estrogen,targets$time.h,sep="")
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["present48"]) / coeffs["absent48"]
logfc_ab <-mean(log2(coeffs["absent48"])) - mean(log2(coeffs["present48"]))
fc_ab
logfc_ab
round(logfc_ab, 3) == round(log2(fc_ab), 3)
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
#solve overdetermined system of linear equations with some highly DF gene
# https://support.bioconductor.org/p/69464/
gnames<- paste(targets$estrogen,targets$time.h,sep="")
# We look at differences in time
coeffs <- qr.solve(design, eset@assayData$exprs["910_at", ])
aver_exprs <- mean(coeffs)
# https://en.wikipedia.org/wiki/Fold_change
# Find foldchanges and log fold changes
fc_ab <- (coeffs["absent48"]) / coeffs["present48"]
logfc_ab <-mean(log2(coeffs["absent48"])) - mean(log2(coeffs["present48"]))
fc_ab
logfc_ab
round(logfc_ab, 3) == round(log2(fc_ab), 3)
# fc_pr <- (coeffs["present48"] - coeffs["present10"]) / coeffs["present48"]
# logfc_pr <- log2(fc_pr)
aver_exprs
coeffs
mean(log2(eset@assayData$exprs[, c("high48-1.cel", "high48-2.cel" )]))
mean(log2(eset@assayData$exprs[, c("low48-1.cel", "low48-2.cel" )]))
min(log2(eset@assayData$exprs[, c("low48-1.cel", "low48-2.cel" )]))
min(log2(eset@assayData$exprs[, c("high48-1.cel", "high48-2.cel" )]))
aver_expr/2.08
aver_exprs/2.08
aver_exprs/2.095
log(aver_exprs)
log2(aver_exprs)
log2(11.106246)
?decideTests()
limma::decideTests(fit2)
?vennDiagram
test_res <- limma::decideTests(fit2, method = "separate", p.value = 0.05, lfc = 0)
# An object of class TestResults. This is essentially a numeric matrix with elements -1, 0 or 1 depending on whether each t-statistic is classified as significantly negative, not significant or significantly positive.
limma::vennDiagram(test_res, include = "both")
test_res <- limma::decideTests(fit2, method = "separate", p.value = 0.05, lfc = 1)
# An object of class TestResults. This is essentially a numeric matrix with elements -1, 0 or 1 depending on whether each t-statistic is classified as significantly negative, not significant or significantly positive.
limma::vennDiagram(test_res, include = "both")
test_res <- limma::decideTests(fit2, method = "separate", p.value = 0.05, lfc = 0)
# An object of class TestResults. This is essentially a numeric matrix with elements -1, 0 or 1 depending on whether each t-statistic is classified as significantly negative, not significant or significantly positive.
limma::vennDiagram(test_res, include = "both")
design
cont.matrix
model.matrix(f)
f
f <- paste(targets$estrogen,targets$time.h,sep="")
f <- factor(f)
design <- model.matrix(+f)
design <- model.matrix(~0)
design
design <- model.matrix(f)
design <- model.matrix(~f)
design
# do the limma modeling
f <- paste(targets$estrogen,targets$time.h,sep="")
f <- factor(f)
# create design matrix
design2 <- model.matrix(~f)
colnames(design2) <- levels(f)
design2
fit <- limma::lmFit(eset, design2)
cont.matrix2 <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design)
fit <- limma::lmFit(eset, design2)
cont.matrix2 <- makeContrasts(E10="present10-absent10",
E48="present48-absent48",
Time="absent48-absent10",levels=design2)
cont.matrix2
cont.matrix
fit <- limma::lmFit(eset, design2)
cont.matrix2 <- makeContrasts(E10="present10",
E48="present48-absent48",
Time="absent48",levels=design2)
cont.matrix2
targets
levels(f)
fit3 <- limma::lmFit(eset, design2)
# naming doesn"t fit but the math should"
cont.matrix2 <- makeContrasts(E10="present10",
E48="present48-absent48",
Time="absent48",levels=design2)
cont.matrix2
fit4  <- limma::contrasts.fit(fit3, cont.matrix2)
fit4  <- limma::eBayes(fit4, robust = TRUE) # use robust LinReg to deal with outliers
fit4
limma::topTable(fit4,coef=1)
limma::topTable(fit4,coef=2)
limma::topTable(fit4,coef=3)
?design
?model.matrix?
q
?model.matrix
