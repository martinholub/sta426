sum(indexing == factor(feature_counts_frac$annotation$GeneID)) == dim(feature_counts$counts)[1]
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_mat <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
counts <- counts[odering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_mat)[i] <- col_name
rsem_mat[ ,i] <- counts
}
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_mat <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
ordering <- match(names, indexing)
counts <- counts[ordering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_mat)[i] <- col_name
rsem_mat[ ,i] <- counts
}
# rsem_n1 <- read.table("RSEM_counts/N1.genes.results", sep="\t", header=TRUE)
dimnames(rsem_mat)
head(rsem_mat)
head(feature_counts_frac$counts)
ordering
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_mat <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
ordering <- match(indexing, names)
counts <- counts[ordering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_mat)[i] <- col_name
rsem_mat[ ,i] <- counts
}
# rsem_n1 <- read.table("RSEM_counts/N1.genes.results", sep="\t", header=TRUE)
head(resm_mat)
head(rsem_mat)
head(feature_counts$counts)
gsub(".*\\.([NT][0-9])\\..*","\\1", colnames(feature_counts$counts))
feature_counts <- loadRData("countResult1.RData")
# strandSpecific=0, GTF.featureType="exon", GTF.attrType="gene_id", useMetaFeatures=TRUE, allowMultiOverlap=TRUE, countMultiMappingReads=TRUE
indexing <- factor(feature_counts$annotation$GeneID)
colnames(feature_counts$counts) <- gsub(".*\\.([NT][0-9])\\..*","\\1", colnames(feature_counts$counts))
feature_counts_frac <- loadRData("countResult2.RData")
# strandSpecific=0, GTF.featureType="exon", GTF.attrType="gene_id", useMetaFeatures=TRUE, allowMultiOverlap=TRUE, countMultiMappingReads=TRUE, fraction=TRUE
# check ordering
colnames(feature_counts_frac$counts) <- gsub(".*\\.([NT][0-9])\\..*","\\1", colnames(feature_counts_frac$counts))
sum(indexing == factor(feature_counts_frac$annotation$GeneID)) == dim(feature_counts$counts)[1]
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_mat <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
ordering <- match(indexing, names)
counts <- counts[ordering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_mat)[i] <- col_name
rsem_mat[ ,i] <- counts
}
# rsem_n1 <- read.table("RSEM_counts/N1.genes.results", sep="\t", header=TRUE)
head(feature_counts$counts)
head(rsem_mat$counts)
head(rsem_mat)
?t.test
?mapply
?apply
?applu
?apply
?r_part
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 2), function(x) t.test(x[0], x[1], alternative = "two.sided")))
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 2), function(x) t.test(x[0], x[1], alternative = "two.sided"))
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 1), function(x) t.test(x[0], x[1], alternative = "two.sided")))
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 1), function(x) t.test(x[0], x[1], alternative = "two.sided"))
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 2), function(x) t.test(x[1], x[2], alternative = "two.sided")))
t.res <- apply(list(rsem_mat, feature_counts$counts), c(1, 2), function(x) t.test(x[1], x[2], alternative = "two.sided"))
?mapply
head(rbind(rsem_mat, feature_counts$counts))
head(cbind(rsem_mat, feature_counts$counts))
head(cbind(rsem_mat, feature_counts$counts))[1:6]
head(cbind(rsem_mat, feature_counts$counts))[,1:6]
head(cbind(rsem_mat, feature_counts$counts))[,7:12]
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
}
t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
t.p_vals <- unlist(lapply(t.res function(x) x$p.value)
t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
t.p_vals <- unlist(lapply(t.res, function(x) x$p.value)
s
t.p_vals
p_vals <- unlist(lapply(t.res, function(x) x$p.value)
)
feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
}
row
head(cbind(rsem_mat, feature_counts$counts))
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (res_twosided == NA){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
}
row
x1
x0
row
head(cbind(rsem_mat, feature_counts$counts))
res_twosided
res_twosied == NA
res_twosided == NA
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
# if (res_twosided == NA){
#   res_twosided <- 1 # rows are identical
# }
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
}
res_twosided
res_twosided == NaN
is.nan(res_twosided)
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided){
twosided_tf <- rep(FALSE, nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
}
# t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
sum((p_vals < 0.05) == twosided_tf)
twosided_tf
p_vals < .05
head(p_vals)
head(t(p_vals))
head(p_vals)
is.nan(p_vals)
p_vals[is.nan(p_vals)] <- 1
sum((p_vals < 0.05) == twosided_tf)
twosided_tf <- rep(FALSE, nrow(rsem_mat))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosdied
}
twosided_tf <- rep(FALSE, nrow(rsem_mat))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosided
}
# t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
# p_vals[is.nan(p_vals)] <- 1 # identical entries
# sum((p_vals < 0.05) == twosided_tf) == nrow(rsem_mat) # check that approaches equivalent
different_genes <- colnames(rsem_mat)[p_vals < .05]
different_genes <- rownames(rsem_mat)[p_vals < .05]
different_genes <- row.names(rsem_mat)[p_vals < .01]
twosided_tf <- rep(FALSE, nrow(rsem_mat))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts_frac$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosided
}
# t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
# p_vals[is.nan(p_vals)] <- 1 # identical entries
# sum((p_vals < 0.05) == twosided_tf) == nrow(rsem_mat) # check that approaches equivalent
different_genes <- row.names(rsem_mat)[p_vals < .01]
twosided_tf <- rep(FALSE, nrow(rsem_mat))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_mat))
for (row in 1: nrow(rsem_mat)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_mat[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosided
}
# t.res <- apply(cbind(rsem_mat, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
# p_vals[is.nan(p_vals)] <- 1 # identical entries
# sum((p_vals < 0.05) == twosided_tf) == nrow(rsem_mat) # check that approaches equivalent
different_genes <- row.names(rsem_mat)[p_vals < .01]
different_genes
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".isoforms.results$", full.names = TRUE)
rsem_iso <- read.table(rsem.files[1], sep="\t", header=TRUE)
dim(rsem_iso$expected_count)
head(rsem_iso$expected_count)
nrow(rsem_iso$expected_count)
rsem_iso
(rsem_iso$expected_count)
length(rsem_iso$expected_count)
17293/5228
?matrix
head(rsem_iso$transcript_id)
length(rsem_iso$transcript_id)
length(rsem_iso$gene_id)
head(rsem_iso$gene_id)
match(indexing, rsem_iso$gene_id)
length(unique(match(indexing, rsem_iso$gene_id)))
match(indexing, rsem_iso$gene_id)[match(indexing, rsem_iso$gene_id) == 13422]
length(match(indexing, rsem_iso$gene_id))
length(match(rsem_iso$gene_id), indexing)
length(match(rsem_iso$gene_id, indexing))
match(rsem_iso$gene_id, indexing))
match(rsem_iso$gene_id, indexing)
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_gene_counts <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
ordering <- match(names, indexing)
counts <- counts[ordering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_gene_counts)[i] <- col_name
rsem_gene_counts[ ,i] <- counts
}
# rsem_n1 <- read.table("RSEM_counts/N1.genes.results", sep="\t", header=TRUE)
twosided_tf <- rep(FALSE, nrow(rsem_gene_counts))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_gene_counts))
for (row in 1: nrow(rsem_gene_counts)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_gene_counts[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosided
}
# t.res <- apply(cbind(rsem_gene_counts, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
# p_vals[is.nan(p_vals)] <- 1 # identical entries
# sum((p_vals < 0.05) == twosided_tf) == nrow(rsem_gene_counts) # check that approaches equivalent
different_genes <- row.names(rsem_gene_counts)[p_vals < .01]
#different_genes
length(different_genes)
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".genes.results$", full.names = TRUE)
ncols <- length(rsem.files)
nrows <- length(indexing)
rsem_gene_counts <- matrix(NA, nrows, ncols, dimnames = list(indexing, 1:ncols))
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
ordering <- match(indexing, names)
counts <- counts[ordering]
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_gene_counts)[i] <- col_name
rsem_gene_counts[ ,i] <- counts
}
# rsem_n1 <- read.table("RSEM_counts/N1.genes.results", sep="\t", header=TRUE)
twosided_tf <- rep(FALSE, nrow(rsem_gene_counts))
p_vals <- vector(mode = "numeric", length =  nrow(rsem_gene_counts))
for (row in 1: nrow(rsem_gene_counts)){ # do it only where differential expression expected
#for (row in 1: length(indD)){
x0 <- rsem_gene_counts[row, ]
x1 <- feature_counts$counts[row, ]
res_twosided <- t.test(x0, x1, alternative = "two.sided")$p.value
if (is.nan(res_twosided)){
res_twosided <- 1 # rows are identical
}
if (res_twosided < .05){
twosided_tf[row] <- TRUE
}
p_vals[row] <- res_twosided
}
# t.res <- apply(cbind(rsem_gene_counts, feature_counts$counts), 1, function(x) t.test(x[1:6], x[7:12], alternative = "two.sided"))
# p_vals <- unlist(lapply(t.res, function(x) x$p.value))
# p_vals[is.nan(p_vals)] <- 1 # identical entries
# sum((p_vals < 0.05) == twosided_tf) == nrow(rsem_gene_counts) # check that approaches equivalent
different_genes <- row.names(rsem_gene_counts)[p_vals < .01]
#different_genes
length(different_genes)
?order
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".isoforms.results$", full.names = TRUE)
rsem_isof_counts <- matrix(NA, nrow = 17293, ncols, dimnames = list(indexing, 1:ncols))
l1 <- list("a", "b", "c", "d")
l2 <- c(10, 8, 1, 4)
l2 <- list["d", "c", "a", "b"]
l2 <- list["d", "c", "a", "b")
l2 <- list("d", "c", "a", "b")
l2[match(l2, l1)]
l2[match(l1, l2)]
head(indexing)
index1 <- rsem_iso$gene_id
head(index1)
# rsem_df <- data.frame(index = indexing)
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".isoforms.results$", full.names = TRUE)
for (i in 1:length(rsem.files)){
rsem <- read.table(rsem.files[i], sep="\t", header=TRUE)
names <- rsem$gene_id
names_isof <- rsem$transcript_id
counts <- rsem$expected_count #rsem[, c("gene_id", "expected_count")]
#ordering <- match(indexing, names)
#counts <- counts[ordering]
if (i == 1){
rsem_isof_counts <- matrix(NA, length(names), ncols, dimnames = list(names_isof, 1:ncols))
}
col_name <- gsub(".*/([NT][0-9])\\..*","\\1", rsem.files[i])
colnames(rsem_isof_counts)[i] <- col_name
rsem_isof_counts[ ,i] <- counts
}
?cor
cor(rsem_gene_counts, use = "pairwise")
cor(rsem_isof_counts, use = "pairwise")
cor(rsem_gene_counts, rsem_isof_counts, use = "pairwise")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, title = "Genes - Samples Correlations",
method = "color", cl.pos="b")
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations",
method = "color", cl.pos="b")
?corrplot::corrplot
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, title = "Genes - Samples Correlations",
method = "square", cl.pos="b")
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations",
method = "circle", cl.pos="b")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, title = "Genes - Samples Correlations",
method = "circle", cl.pos="r")
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations",
method = "circle", cl.pos="r")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, title = "Genes - Samples Correlations", line = -1,
method = "circle", cl.pos="r")
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations", line = -1,
method = "circle", cl.pos="r")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, method = "circle", cl.pos="r")
title( "Genes - Samples Correlations", line = -1)
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations", line = -1,
method = "circle", cl.pos="r")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, method = "circle", cl.pos="r")
title( "Genes - Samples Correlations", line = -0.5)
corrplot::corrplot(cor_isof, title = "Isoforms - Samples Correlations", line = -1,
method = "circle", cl.pos="r")
cor_genes <- cor(rsem_gene_counts, use = "pairwise")
cor_isof <- cor(rsem_isof_counts, use = "pairwise")
par(mfrow=c(1,2))
corrplot::corrplot(cor_genes, method = "circle", cl.pos="r")
title("Genes - Samples Correlations", line = -0.5)
corrplot::corrplot(cor_isof, method = "circle", cl.pos="r")
title("Isoforms - Samples Correlations", line = -0.5)
feature_counts$stat
feature_counts_frac$stat
feature_counts_frac$Status["Unassigned_MultiMapping", ]
feature_counts_frac$Status[3, ]
feature_counts_frac[3, ]
feature_counts_frac$stat[1, ]
feature_counts_frac$stat[feature_counts_frac$stat$Status == "Unassigned_MultiMapping", ]
feature_counts_frac$stat[feature_counts_frac$stat$Status == "Unassigned_MultiMapping", ]
rownames(feature_counts_frac$stat)
feature_counts_frac$stat[feature_counts_frac$stat$Status == "Unassigned_MultiMapping", 2: ncol(feature_counts_frac$stat)]
sum(feature_counts_frac$stat[feature_counts_frac$stat$Status == "Unassigned_MultiMapping", 2: ncol(feature_counts_frac$stat)])
unassigned_frac <- (feature_counts_frac$stat[startsWith(feature_counts_frac$stat$Status, "Unassigned"), 2: ncol(feature_counts_frac$stat)])
unassigned_frac
assigned_frac <- (feature_counts_frac$stat[startsWith(feature_counts_frac$stat$Status, "Assigned"), 2: ncol(feature_counts_frac$stat)])
assigned_frac
sum(unassigned_frac)
unassigned_frac <- (feature_counts_frac$stat[startsWith(feature_counts_frac$stat$Status, "Unassigned"), 2: ncol(feature_counts_frac$stat)])
assigned_frac <- (feature_counts_frac$stat[startsWith(feature_counts_frac$stat$Status, "Assigned"), 2: ncol(feature_counts_frac$stat)])
sum(unassigned_frac) / sum(assigned_frac)
unassigned <- (feature_counts$stat[startsWith(feature_counts$stat$Status, "Unassigned"), 2: ncol(feature_counts$stat)])
assigned <- (feature_counts$stat[startsWith(feature_counts$stat$Status, "Assigned"), 2: ncol(feature_counts$stat)])
sum(unassigned) / sum(assigned)
unassigned
head(rsem_gene_counts)
head(rsem_gene_counts[, "N1"])
sum(rsem_gene_counts[, "N1"])
sum(rsem_gene_counts)
rsem.stats <- list.files(path = "RSEM_counts/", pattern = ".cnt$", full.names = TRUE)
rsem.stats
rsem.stats <- list.files(path = "RSEM_counts/", pattern = ".cnt$", full.names = TRUE, recursive = TRUE)
rsem.stats
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".cnt$", full.names = TRUE, recursive = TRUE)
rsem.cnts <- read.table(rsem.files[i], sep="\t", header=FALSE, nrows = 1)
rsem.cnts
rsem.cnts[1, 2]
?read.table
sem.cnts <- read.table(rsem.files[1], sep="", header=FALSE, nrows = 1)
sem.cnts
sem.cnts[1, 2]
sum(rsem_gene_counts[ , "N1"])
# see https://github.com/deweylab/RSEM/blob/master/cnt_file_description.txt
rsem.files <- list.files(path = "RSEM_counts/", pattern = ".cnt$", full.names = TRUE, recursive = TRUE)
num_total <- vector(mode = "numeric", length = length(rsem.files))
num_aligned <- vector(mode = "numeric", length = length(rsem.files))
num_unaligned <- vector(mode = "numeric", length = length(rsem.files))
for (i in 1:length(rsem.files)){
rsem.cnts <- read.table(rsem.files[i], sep="", header=FALSE, nrows = 1)
num_total[i] <- rsem.cnts[ , 4]
num_aligned[i] <- rsem.cnts[ , 2]
num_unaligned[i] <- rsem.cnts[ , 1] + rsem.cnts[ , 3]
}
sum(num_unaligned) / sum(num_aligned)
sum(num_unaligned) / sum(rsem_gene_counts)
